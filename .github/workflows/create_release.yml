name: Upload Release Asset

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifacts: ${{ steps.build.outputs.artifacts }}
      hashes: ${{ steps.hash.outputs.hashes }}
      version:  ${{ steps.art_name.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3

      - name: Build using maven
        id: build
        run: |
          # Your normal build workflow targets here
          mvn clean package

          # Save the location of the maven output files for easier reference
          ARTIFACT_PATTERN=./target/$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)-$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)*.jar
          echo "artifact_pattern=$ARTIFACT_PATTERN" >> "$GITHUB_OUTPUT"

      - name: Generate subject
        id: hash
        run: |
          echo "hashes=$(sha256sum ${{ steps.build.outputs.artifact_pattern }} | base64 -w0)" >> "$GITHUB_OUTPUT"
    
      - name: Get Artifact name
        id: art_name
        run: |
          VERSION=${{ github.ref_name }}
          echo "version=lpvs-${VERSION:1}.jar" >> "$GITHUB_OUTPUT"
#           # echo "version=${VERSION:1}" >> "$GITHUB_OUTPUT"
#           # echo "hashes=$(sha256sum target/lpvs-${{ steps.hash.outputs.version }}.jar | base64 -w0)" >> "$GITHUB_OUTPUT"
#           {
#             echo "version=${VERSION:1}"
#             echo "hashes=$(sha256sum target/lpvs-${{ steps.hash.outputs.version }}.jar | base64 -w0)"
#           } >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # tag=v3
        with:
          name: ${{ steps.art_name.outputs.version }}
          path: ./target/${{ steps.art_name.outputs.version }}
          if-no-files-found: error

  tagged-release:
    needs: [build]
    name: "Tagged Release"
    runs-on: "ubuntu-latest"

    steps:
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          title: "LPVS ${{ github.ref_name }}"

  provenance:
    needs: [build, tagged-release]
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
    with:
      base64-subjects: "${{ needs.build.outputs.hashes }}"
      upload-assets: true # Optional: Upload to a new release

  # This step uploads our artifacts to the tagged GitHub release.
  release:
    needs: [build, tagged-release, provenance]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifact1
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # tag=v2.1.0
        with:
          name: ${{ needs.build.outputs.version }}

      - name: Upload assets
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5 # v0.1.14
        with:
          files: |
            ${{ needs.build.outputs.version }}


# jobs:
#   # tagged-release:
#   #   name: "Tagged Release"
#   #   runs-on: "ubuntu-latest"

#   #   steps:
#   #     # ...
#   #     - name: "Build & test"
#   #       run: |
#   #         echo "done!"

#   #     - uses: "marvinpinto/action-automatic-releases@latest"
#   #       with:
#   #         repo_token: "${{ secrets.GITHUB_TOKEN }}"
#   #         prerelease: false
#   #         # files: |
#   #         #   # LICENSE.txt
#   #         #   *.jar
